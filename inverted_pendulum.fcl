FUNCTION_BLOCK Inverted_Pendulum

    VAR_INPUT
        theta : REAL;
        theta_dot : REAL;
        x_dot : REAL;
        (* other vars if needed *)
    END_VAR

    VAR_OUTPUT
        F : REAL;
        (* other vars if needed *)
    END_VAR

    FUZZIFY theta
        (* terms *)
        TERM down_left := (315,0) (360,1);
        TERM left := (220,0) (290,1) (320,0);
        TERM top_left := (180,0) (195,1) (235,0);
        TERM middle := (170,0) (180,1) (190,0);
        TERM top_right := (125,0) (165,1) (180,0);
        TERM right := (40,0) (70,1) (140,0);
        TERM down_right :=  (0,1) (45,0);
    END_FUZZIFY

    FUZZIFY theta_dot
        (* terms *)
        TERM acw_fast := (3,0) (7,1);
        TERM acw_medium := (1,0) (3,1) (6.5,0);
        TERM acw := (0,0) (0.75,1) (3,0);
        TERM fix := (-0.15,0) (0,1) (0.15,0);
        TERM cw := (-3,0) (-0.75,1) (0,0);
        TERM cw_medium := (-6.5,0) (-3,1) (-1,0);
        TERM cw_fast := (-7,1) (-3,0);
    END_FUZZIFY

    FUZZIFY x_dot
        TERM fast_left := (-80,1) (-60,0);
        TERM slow_left := (-60,0) (-40,1) (0,0);
        TERM static := (-40,0) (0,1) (40,0);
        TERM slow_right := (0,0) (40,1) (60,0);
        TERM fast_right := (60,0) (80,1);
    END_FUZZIFY

    DEFUZZIFY F
        TERM left_very_fast := (-80,1) (-60,0);
        TERM left_fast := (-80,0) (-70,1) (-50,0);
        TERM left_medium := (-60,0) (-50,1) (-20,0);
        TERM left := (-50,0) (-20,1) (0,0);
        TERM fix := (-0.4,0) (0,1) (0.4,0);
        TERM right := (0,0) (20,1) (50,0);
        TERM right_medium := (20,0) (50,1) (60,0);
        TERM right_fast := (50,0) (70,1) (80,0);
        TERM right_very_fast := (60,0) (80,1);
        ACCU : MAX;
        METHOD : COG;
        DEFAULT := 0;
    END_DEFUZZIFY

    RULEBLOCK Inverted_Pendulum
        (* rules *)
        AND : MIN;
        OR : MAX;

        RULE 1 : IF theta IS middle AND theta_dot IS acw
            THEN F IS left_medium;

        RULE 2 : IF theta IS middle AND theta_dot IS acw_medium
            THEN F IS left_fast;

        RULE 3 : IF theta IS middle AND theta_dot IS cw
            THEN F IS right_medium;

        RULE 4 : IF theta IS middle AND theta_dot IS cw_medium
            THEN F IS right_fast;

        RULE 5 : IF theta IS middle AND theta_dot IS acw_fast
            THEN F IS left_very_fast;

        RULE 6 : IF theta IS middle AND theta_dot IS cw_fast
            THEN F IS right_very_fast;

        RULE 7 : IF theta IS middle AND theta_dot IS fix
            THEN F IS fix;

        RULE 8 : IF theta IS top_right AND theta_dot IS acw
            THEN F IS right_medium;

        RULE 15 : IF theta IS top_right AND theta_dot IS acw_medium
            THEN F IS fix;

        RULE 9 : IF theta IS top_left AND theta_dot IS cw
            THEN F IS left_medium;

        RULE 16 : IF theta IS top_left AND theta_dot IS cw_medium
            THEN F IS fix;

        RULE 10 : IF theta IS top_right AND theta_dot IS acw_fast
            THEN F IS left_very_fast;

        RULE 11 : IF theta IS top_left AND theta_dot IS cw_fast
            THEN F IS right_very_fast;

        RULE 12 : IF theta IS down_right AND (theta_dot IS fix OR theta_dot IS acw OR theta_dot IS acw_medium)
            THEN F IS left;

        RULE 13 : IF theta IS down_left AND (theta_dot IS fix OR theta_dot IS cw OR theta_dot IS cw_medium)
            THEN F IS right;





    END_RULEBLOCK

END_FUNCTION_BLOCK
